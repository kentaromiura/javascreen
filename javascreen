#!/usr/bin/env node
var clint = require('clint')(),
	fs = require('fs'),
	phantom = require('phantom');

clint.command('--help', '-h', 'general usage information.');
clint.command('--source','-s', 'javascript source.');
clint.command('--destination','-d','file to save.');
clint.command('--viewportWidth','-x','viewport width (default: 800)');
clint.command('--viewportHeight','-y','viewport height (default: 600)');
clint.command('--prettyprint', '-p', 'run code beautifier');

var escapeXML = function(str){
	return (''+str).replace(/&|<|>|'|"/g,function(c){
		switch(c){
			case '&': return '&amp;';break;
			case '<': return '&lt;';break;
			case '>': return '&gt;';break;
			case "'": return '&apos;';break;
			case '"': return '&quote;';break;
			default: return c;
		}
	});
}

var help = function(err){
	console.log(clint.help(2, " : "));
	process.exit(err);
}

var args = process.argv.slice(2)

if (!args.length) help(1);

var source = null;
var destination = null;
var height = 600;
var width = 800;
var uglify = null;

clint.on("command", function(name, value){
	switch (name){
		case "--help" : help(0); break;
		case "--source": source = value; break;
		case "--destination": destination = value; break;
		case "--viewportHeight": height = value; break;
		case "--viewportWidth": width = value; break;
		case "--prettyprint": uglify = require('uglify-js'); break;
	}
})

clint.on("complete", function(){
	if(!source) {
		return help(2);
	}else{
		destination = destination || source +'.png'
		
		var javascript = fs.readFileSync(source).toString();
		if(uglify){
			  javascript = uglify.uglify.gen_code(uglify.parser.parse(javascript), { beautify: true });
		}
		javascript = escapeXML(javascript);
		var template = fs.readFileSync('index.html').toString();
		var file = ( template.replace('{code}', javascript) );
		phantom.create (function(ph){
			ph.createPage(function(page){
				page.set('viewportSize',{width: width, height: height});

				page.open('data:text/html;base64,' + new Buffer(file).toString('base64'), function(status){
					
					if(status == 'success'){
						page.evaluate(function(){
						var target = document.getElementById('target');

						var padding_bottom = 20;

							return {	
								x: target.offsetWidth,
								y: target.offsetHeight + padding_bottom
							};
						}, function(result){
							page.set('viewportSize',{width: result.x , height: result.y});
							
							page.render(destination, function(){
								ph.exit();
							});
						});
						
					}else{
						ph.exit();
					}
				})
			})
		});

	}
})

clint.parse(args);

